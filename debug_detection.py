import json

# 测试数据
raw_data = {
    "result": "[[\"\", \"2025-09-29\", \"\", \"\", \"\", \"\", \"\", \"2025-09-30\", \"\", \"\", \"\", \"\", \"\", \"2025-10-01\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"2025-10-02\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"2025-10-03\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"], [\"\", \"BROADCAST\", \"\", \"OPEN\", \"\", \"SOLVED\", \"\", \"BROADCAST\", \"\", \"OPEN\", \"\", \"SOLVED\", \"\", \"BROADCAST\", \"\", \"EXPIRED\", \"\", \"OPEN\", \"\", \"SOLVED\", \"\", \"BROADCAST\", \"\", \"EXPIRED\", \"\", \"OPEN\", \"\", \"SOLVED\", \"\", \"BROADCAST\", \"\", \"EXPIRED\", \"\", \"OPEN\", \"\", \"SOLVED\", \"\", \"\", \"\"], [\"agent_name\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"status_num\", \"percentage\", \"sum_status_num\", \"sum_percentage\"], [\"Anisyah Fitri\", \"\", \"\", \"\", \"\", \"11\", \"1\", \"\", \"\", \"\", \"\", \"9\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"15\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"11\", \"1\", \"\", \"\", \"1\", \"0.0556\", \"2\", \"0.1111\", \"15\", \"0.8333\", \"64\", \"5\"], [\"Bittang Julianus\", \"\", \"\", \"\", \"\", \"12\", \"1\", \"\", \"\", \"1\", \"0.2\", \"4\", \"0.8\", \"\", \"\", \"\", \"\", \"\", \"\", \"14\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"7\", \"1\", \"48\", \"5\"], [\"Lenggo Novelita\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"\", \"\", \"9\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"19\", \"2\"], [\"Melfi Juliani\", \"\", \"\", \"\", \"\", \"8\", \"1\", \"\", \"\", \"\", \"\", \"8\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"16\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"52\", \"5\"], [\"Melisa Siagian\", \"\", \"\", \"\", \"\", \"8\", \"1\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"12\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"1\", \"0.0769\", \"\", \"\", \"12\", \"0.9231\", \"53\", \"5\"], [\"Mesa Lestari\", \"\", \"\", \"1\", \"0.1\", \"9\", \"0.9\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"16\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"12\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"11\", \"1\", \"59\", \"5\"], [\"Nia Fiscarina\", \"\", \"\", \"\", \"\", \"7\", \"1\", \"\", \"\", \"1\", \"0.1111\", \"8\", \"0.8889\", \"\", \"\", \"1\", \"0.0588\", \"\", \"\", \"16\", \"0.9412\", \"\", \"\", \"\", \"\", \"\", \"\", \"12\", \"1\", \"\", \"\", \"\", \"\", \"1\", \"0.0909\", \"10\", \"0.9091\", \"56\", \"5\"], [\"Poppy Amiralda\", \"\", \"\", \"1\", \"0.0769\", \"12\", \"0.9231\", \"\", \"\", \"1\", \"0.1111\", \"8\", \"0.8889\", \"\", \"\", \"\", \"\", \"\", \"\", \"14\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"13\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"12\", \"1\", \"61\", \"5\"], [\"Utari Diani\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"\", \"\", \"10\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"18\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"12\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"9\", \"1\", \"59\", \"5\"], [\"Widia Ayu\", \"\", \"\", \"\", \"\", \"11\", \"1\", \"\", \"\", \"\", \"\", \"9\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"15\", \"1\", \"\", \"\", \"\", \"\", \"\", \"\", \"12\", \"1\", \"\", \"\", \"1\", \"0.0714\", \"\", \"\", \"13\", \"0.9286\", \"61\", \"5\"], [\"(空白)\", \"3347\", \"1\", \"\", \"\", \"\", \"\", \"3554\", \"0.9986\", \"5\", \"0.0014\", \"\", \"\", \"3272\", \"0.9994\", \"\", \"\", \"1\", \"0.0003\", \"1\", \"0.0003\", \"3530\", \"0.9992\", \"2\", \"0.0006\", \"1\", \"0.0003\", \"\", \"\", \"3596\", \"0.9994\", \"1\", \"0.0003\", \"1\", \"0.0003\", \"\", \"\", \"17311\", \"5.0001\"], [\"统计\", \"3347\", \"1\", \"2\", \"0.1769\", \"98\", \"9.8231\", \"3554\", \"0.9986\", \"8\", \"0.4236\", \"85\", \"9.5778\", \"3272\", \"0.9994\", \"1\", \"0.0588\", \"1\", \"0.0003\", \"137\", \"8.9415\", \"3530\", \"0.9992\", \"2\", \"0.0006\", \"1\", \"0.0003\", \"102\", \"9\", \"3596\", \"0.9994\", \"4\", \"0.2042\", \"4\", \"0.2023\", \"99\", \"8.5941\", \"17843\", \"52.0001\"]]"
}

# 解析数据
table_data = json.loads(raw_data["result"])

print("=== 调试表头检测逻辑 ===")
print(f"总行数: {len(table_data)}")
print()

# 模拟服务端的检测逻辑
def detect_header_rows(data):
    """
    智能检测表头行数 - 服务端逻辑
    """
    if not data or len(data) < 2:
        return min(1, len(data))
    
    # 方法1: 检测表头关键词（最可靠的方法）
    print("方法1: 检测表头关键词")
    for i, row in enumerate(data):
        row_str = ' '.join(str(cell) for cell in row if cell)
        print(f"  行{i}: '{row_str[:50]}...'")
        
        if any(keyword in row_str.lower() for keyword in 
               ['agent_name', 'status_num', 'percentage']):
            print(f"    -> 找到表头关键词，表头行数: {i + 1}")
            return i + 1  # 这一行是表头，下一行开始是数据
    
    # 方法2: 检测第一列的数据类型模式
    print("\n方法2: 检测第一列模式")
    for i, row in enumerate(data):
        if row and len(row) > 0:
            first_cell = row[0]
            if first_cell and isinstance(first_cell, str):
                print(f"  行{i}: 第一列='{first_cell}'")
                # 如果第一列开始出现人名（通常包含空格，且长度适中）
                if (' ' in first_cell and 5 <= len(first_cell) <= 20 and 
                    not any(keyword in first_cell.lower() for keyword in 
                           ['broadcast', 'open', 'solved', 'expired', 'status', 'percentage'])):
                    print(f"    -> 检测到人名模式，表头行数: {i}")
                    return max(1, i)
    
    # 默认策略：前3行作为表头
    print("\n使用默认策略: 前3行作为表头")
    return min(3, len(data) // 2)

# 运行检测
result = detect_header_rows(table_data)
print(f"\n=== 最终检测结果 ===")
print(f"检测到的表头行数: {result}")
print(f"数据开始行: {result + 1}")
print()

# 显示分界
print("表头部分:")
for i in range(result):
    print(f"  行{i}: {table_data[i][:5]}...")

print("\n数据部分:")
for i in range(result, min(result + 3, len(table_data))):
    print(f"  行{i}: {table_data[i][:5]}...")
